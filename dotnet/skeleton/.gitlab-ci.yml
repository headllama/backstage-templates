variables:
  PROJETO: ${{values.app_name}}
  NAMESPACE: "teste-pipeline"
  PORTA: "8080"

# repos
#  REGISTRY: "registry.coe.sysmap.com.br/rfp-vivo-2023"
  REGISTRY: "walber7"

# containers
  DOTNET_CONTAINER: "mcr.microsoft.com/dotnet/sdk:7.0"
  KANIKO_CONTAINER: "gcr.io/kaniko-project/executor:debug"
  GRYPE_CONTAINER: "alpine:latest"
  HELM_CONTAINER: "alpine/helm:latest"

  APP_DIR: "src/api"
  TEST_DIR: "src/tests"

  KUBECONFIG_FILE: ${{"$" + values.k8s_cluster}}

stages:
  - build
  - unit-test
  - sast
  - kaniko
  - grype
  - deploy


build:
  stage: build
  image: 
    name: $DOTNET_CONTAINER
    entrypoint: [""]
  script:
    - dotnet build $APP_DIR
#  artifacts:
#    paths:
#      - node_modules

unit-test:
  stage: unit-test
  image: 
    name: $DOTNET_CONTAINER
    entrypoint: [""]
  script:
    - dotnet test $TEST_DIR
# #   artifacts:
# #     paths:
# #       - node_modules
# #    expire_in: 1 day


sonarqube scan:
  stage: sast
  image: 
    name: $DOTNET_CONTAINER
    entrypoint: [""]
  script:
    - cd $APP_DIR
    - apt-get update && apt-get install -y openjdk-11-jdk
    - dotnet tool install --global dotnet-sonarscanner
    - /root/.dotnet/tools/dotnet-sonarscanner begin /k:"dotnet-demo" /d:sonar.host.url=${SONARQUBE_URL} /d:sonar.login=${SONARQUBE_TOKEN}
    - dotnet build
    - /root/.dotnet/tools/dotnet-sonarscanner end /d:sonar.login=${SONARQUBE_TOKEN}


docker build:
#  needs: ["build"]
  stage: kaniko
  image:
    name: $KANIKO_CONTAINER
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "$REGISTRY_TOKEN" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/${APP_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/${APP_DIR}/Dockerfile"
      --destination "$REGISTRY/$PROJETO:$CI_PIPELINE_IID"

docker verify:
  needs: ["docker build"]
  stage: grype
  image: 
    name: $GRYPE_CONTAINER
    entrypoint: [""]
  script:
    - apk add curl
    - curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
    - grype $REGISTRY/$PROJETO:$CI_PIPELINE_IID


deploy:
  stage: deploy
  image: 
    name: $HELM_CONTAINER
    entrypoint: [""]
  before_script:
    - export KUBECONFIG=${KUBECONFIG_FILE}  
  script:
    - sed -i "s,repository:.*,repository:\ ${REGISTRY}\/${PROJETO}," helm/values.yaml
    - sed -i "s,tag:.*,tag:\ ${CI_PIPELINE_IID}," helm/values.yaml
    - sed -i "s,namespace:.*,namespace:\ ${NAMESPACE}," helm/values.yaml
    - sed -i "s,name:.*,name:\ ${PROJETO}," helm/Chart.yaml  
    - helm upgrade --install ${PROJETO} helm/ -n ${NAMESPACE}

