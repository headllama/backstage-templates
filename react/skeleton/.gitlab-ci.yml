variables:
  PROJETO: "portaladmin-pipeline"
  NAMESPACE_MS: "teste-pipeline"
  PORTA: "3000"

# repos
  REGISTRY: "walber7"

# containers
  NODE_CONTAINER: "node:latest"
  KANIKO_CONTAINER: "gcr.io/kaniko-project/executor:debug"
  GRYPE_CONTAINER: "alpine:latest"
  HELM_CONTAINER: "alpine/helm:latest"

  KUBECONFIG_FILE: ${{"$" + values.k8s_cluster}}

stages:
  - build
  # - unit-test
  # - sast
  - kaniko
  - grype
  - deploy


build:
  stage: build
  image: 
    name: $NODE_CONTAINER
    entrypoint: [""]
  script:
    - npm install
#  artifacts:
#    paths:
#      - node_modules

# unit-test:
#   needs: ["build"]
#   stage: unit-test
#   image: 
#     name: $NODE_CONTAINER
#     entrypoint: [""]
#   script:
#     - npm i
#     - npm run test
# #   artifacts:
# #     paths:
# #       - node_modules
# # #    expire_in: 1 day


# sonarqube_scan:
#   # needs: ["unit-test"]
#   stage: sast
#   image: 
#     name: $NODE_CONTAINER
#     entrypoint: [""]
#   script:
#     - sed -i "s,SONAR-URL,${SONARQUBE_URL}," ./sonar-project.js
#     - sed -i "s,SONAR-TOKEN,${SONARQUBE_TOKEN}," ./sonar-project.js
#     - cat ./sonar-project.js
#     - npm i
#     - npm install -D sonarqube-scanner
#     - npm run sonar

docker build:
  needs: ["build"]
  stage: kaniko
  image:
    name: $KANIKO_CONTAINER
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "$REGISTRY_TOKEN" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "$REGISTRY/$PROJETO:$CI_PIPELINE_IID"


docker verify:
  needs: ["docker build"]
  stage: grype
  image: 
    name: $GRYPE_CONTAINER
    entrypoint: [""]
  script:
    - apk add curl
    - curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
    - grype $REGISTRY/$PROJETO:$CI_PIPELINE_IID


deploy:
  stage: deploy
  image: 
    name: $HELM_CONTAINER
    entrypoint: [""]
  before_script:
    - export KUBECONFIG=${KUBECONFIG_FILE}  
  script:
    - sed -i "s,repository:.*,repository:\ ${REGISTRY}\/${PROJETO}," helm/values.yaml
    - sed -i "s,tag:.*,tag:\ ${CI_PIPELINE_IID}," helm/values.yaml
    - sed -i "s,name:.*,name:\ ${PROJETO}," helm/Chart.yaml  
    - helm upgrade --install $PROJETO ./helm/ -n ${NAMESPACE_MS} --create-namespace
